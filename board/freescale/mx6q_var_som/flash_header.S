/*
 * Copyright (C) 2014 Variscite, Ltd.
 * support@variscite.com
 *
 * Copyright (C) 2012 Freescale Semiconductor, Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
 */

#include <config.h>
#include <asm/arch/mx6.h>


//#define QUAD_DUAL_MEMORY_TYPE_2
//

#ifdef	CONFIG_FLASH_HEADER
#ifndef CONFIG_FLASH_HEADER_OFFSET
# error "Must define the offset of flash header"
#endif

#define CPU_2_BE_32(l) \
       ((((l) & 0x000000FF) << 24) | \
	(((l) & 0x0000FF00) << 8)  | \
	(((l) & 0x00FF0000) >> 8)  | \
	(((l) & 0xFF000000) >> 24))

#define MXC_DCD_ITEM(i, addr, val)   \
dcd_node_##i:                        \
        .word CPU_2_BE_32(addr) ;     \
        .word CPU_2_BE_32(val)  ;     \

.section ".text.flasheader", "x"
	b	_start
	.org	CONFIG_FLASH_HEADER_OFFSET

ivt_header:       .word 0x402000D1 /* Tag=0xD1, Len=0x0020, Ver=0x40 */
app_code_jump_v:  .word _start
reserv1:          .word 0x0
dcd_ptr:          .word dcd_hdr
boot_data_ptr:	  .word boot_data
self_ptr:         .word ivt_header
#ifdef CONFIG_SECURE_BOOT
app_code_csf:     .word __hab_data
#else
app_code_csf:     .word 0x0
#endif
reserv2:          .word 0x0

boot_data:        .word TEXT_BASE
#ifdef CONFIG_SECURE_BOOT
image_len:        .word __hab_data_end - TEXT_BASE + CONFIG_FLASH_HEADER_OFFSET
#else
image_len:        .word _end_of_copy  - TEXT_BASE + CONFIG_FLASH_HEADER_OFFSET
#endif
plugin:           .word 0x0

#if defined CONFIG_MX6DL_DDR3
#if defined CONFIG_DDR_32BIT
/*
 * i.MX6SOLO 32BIT-DDR
 * ====================
 */
dcd_hdr:          .word 0x40E001D2 /* Tag=0xD2, Len=59*8 + 4 + 4, Ver=0x40 */
write_dcd_cmd:    .word 0x04DC01CC /* Tag=0xCC, Len=59*8 + 4, Param=0x04 */

MXC_DCD_ITEM(1, IOMUXC_BASE_ADDR + 0x774, 0x000C0000)
MXC_DCD_ITEM(2, IOMUXC_BASE_ADDR + 0x754, 0x00000000)

MXC_DCD_ITEM(3, IOMUXC_BASE_ADDR + 0x4ac, 0x00000030)
MXC_DCD_ITEM(4, IOMUXC_BASE_ADDR + 0x4b0, 0x00000030)

MXC_DCD_ITEM(5, IOMUXC_BASE_ADDR + 0x464, 0x00000030)
MXC_DCD_ITEM(6, IOMUXC_BASE_ADDR + 0x490, 0x00000030)
MXC_DCD_ITEM(7, IOMUXC_BASE_ADDR + 0x74c, 0x00000030)

MXC_DCD_ITEM(8, IOMUXC_BASE_ADDR + 0x494, 0x00000030)

MXC_DCD_ITEM(9, IOMUXC_BASE_ADDR + 0x4a0, 0x00000000)

MXC_DCD_ITEM(10, IOMUXC_BASE_ADDR + 0x4b4, 0x00000030)
MXC_DCD_ITEM(11, IOMUXC_BASE_ADDR + 0x4b8, 0x00000030)
MXC_DCD_ITEM(12, IOMUXC_BASE_ADDR + 0x76c, 0x00000030)

MXC_DCD_ITEM(13, IOMUXC_BASE_ADDR + 0x750, 0x00020000)

MXC_DCD_ITEM(14, IOMUXC_BASE_ADDR + 0x4bc, 0x00000030)
MXC_DCD_ITEM(15, IOMUXC_BASE_ADDR + 0x4c0, 0x00000030)
MXC_DCD_ITEM(16, IOMUXC_BASE_ADDR + 0x4c4, 0x00000030)
MXC_DCD_ITEM(17, IOMUXC_BASE_ADDR + 0x4c8, 0x00000030)

MXC_DCD_ITEM(18, IOMUXC_BASE_ADDR + 0x760, 0x00020000)

MXC_DCD_ITEM(19, IOMUXC_BASE_ADDR + 0x764, 0x00000030)
MXC_DCD_ITEM(20, IOMUXC_BASE_ADDR + 0x770, 0x00000030)
MXC_DCD_ITEM(21, IOMUXC_BASE_ADDR + 0x778, 0x00000030)
MXC_DCD_ITEM(22, IOMUXC_BASE_ADDR + 0x77c, 0x00000030)

MXC_DCD_ITEM(23, IOMUXC_BASE_ADDR + 0x470, 0x00000030)
MXC_DCD_ITEM(24, IOMUXC_BASE_ADDR + 0x474, 0x00000030)
MXC_DCD_ITEM(25, IOMUXC_BASE_ADDR + 0x478, 0x00000030)
MXC_DCD_ITEM(26, IOMUXC_BASE_ADDR + 0x47c, 0x00000030)

//=============================================================================
// DDR Controller Registers
//=============================================================================
MXC_DCD_ITEM(27, MMDC_P0_BASE_ADDR + 0x800, 0xA1390003) // DDR_PHY_P0_MPZQHWCTRL, enable both one-time & periodic HW ZQ

// write leveling, based on Variscite SOM board layout and T topology
MXC_DCD_ITEM(28, MMDC_P0_BASE_ADDR + 0x80c, 0x001F001F)
MXC_DCD_ITEM(29, MMDC_P0_BASE_ADDR + 0x810, 0x001F001F)

//Read DQS Gating calibration
MXC_DCD_ITEM(30, MMDC_P0_BASE_ADDR + 0x83c, 0x42540250) // MPDGCTRL0 PHY0
MXC_DCD_ITEM(31, MMDC_P0_BASE_ADDR + 0x840, 0x023C0244) // MPDGCTRL1 PHY0

//Read calibration
MXC_DCD_ITEM(32, MMDC_P0_BASE_ADDR + 0x848, 0x44444646) // MPDGCTRL0 PHY1

//Write calibration
MXC_DCD_ITEM(33, MMDC_P0_BASE_ADDR + 0x850, 0x34343032) // MPDGCTRL1 PHY1

//read data bit delay: (3 is the reccommended default value, although out of reset value is 0):
MXC_DCD_ITEM(34, MMDC_P0_BASE_ADDR + 0x81c, 0x33333333) // DDR_PHY_P0_MPREDQBY0DL3
MXC_DCD_ITEM(35, MMDC_P0_BASE_ADDR + 0x820, 0x33333333) // DDR_PHY_P0_MPREDQBY1DL3
MXC_DCD_ITEM(36, MMDC_P0_BASE_ADDR + 0x824, 0x33333333) // DDR_PHY_P0_MPREDQBY2DL3
MXC_DCD_ITEM(37, MMDC_P0_BASE_ADDR + 0x828, 0x33333333) // DDR_PHY_P0_MPREDQBY3DL3

// Complete calibration by forced measurement:
MXC_DCD_ITEM(38, MMDC_P0_BASE_ADDR + 0x8b8, 0x00000800)

//MMDC init:
MXC_DCD_ITEM(39, MMDC_P0_BASE_ADDR + 0x004, 0x0002002D) // MMDC0_MDPDC
MXC_DCD_ITEM(40, MMDC_P0_BASE_ADDR + 0x008, 0x00333030) // MMDC0_MDOTC
MXC_DCD_ITEM(41, MMDC_P0_BASE_ADDR + 0x00c, 0x3F435313) // MMDC0_MDCFG0
MXC_DCD_ITEM(42, MMDC_P0_BASE_ADDR + 0x010, 0xB66E8B63) // MMDC0_MDCFG1
MXC_DCD_ITEM(43, MMDC_P0_BASE_ADDR + 0x014, 0x01FF00DB) // MMDC0_MDCFG2
MXC_DCD_ITEM(44, MMDC_P0_BASE_ADDR + 0x018, 0x00001740) // MMDC0_MDMISC

MXC_DCD_ITEM(45, MMDC_P0_BASE_ADDR + 0x01c, 0x00008000) // MMDC0_MDSCR, set the Configuration request bit during MMDC set up
MXC_DCD_ITEM(46, MMDC_P0_BASE_ADDR + 0x02c, 0x000026d2) // MMDC0_MDRWD; recommend to maintain the default values
MXC_DCD_ITEM(47, MMDC_P0_BASE_ADDR + 0x030, 0x00431023) // MMDC0_MDOR
MXC_DCD_ITEM(48, MMDC_P0_BASE_ADDR + 0x040, 0x00000017) // CS0_END

MXC_DCD_ITEM(49, MMDC_P0_BASE_ADDR + 0x000, 0x83190000) // MMDC0_MDCTL

// Mode register writes
MXC_DCD_ITEM(50, MMDC_P0_BASE_ADDR + 0x01c, 0x04008032) // MMDC0_MDSCR, MR2 write, CS0
MXC_DCD_ITEM(51, MMDC_P0_BASE_ADDR + 0x01c, 0x00008033) // MMDC0_MDSCR, MR3 write, CS0
MXC_DCD_ITEM(52, MMDC_P0_BASE_ADDR + 0x01c, 0x00048031) // MMDC0_MDSCR, MR1 write, CS0
MXC_DCD_ITEM(53, MMDC_P0_BASE_ADDR + 0x01c, 0x05208030) // MMDC0_MDSCR, MR0 write, CS0
MXC_DCD_ITEM(54, MMDC_P0_BASE_ADDR + 0x01c, 0x04008040) // MMDC0_MDSCR, ZQ calibration command sent to device on CS0

MXC_DCD_ITEM(55, MMDC_P0_BASE_ADDR + 0x020, 0x00005800) // MMDC0_MDREF
MXC_DCD_ITEM(56, MMDC_P0_BASE_ADDR + 0x818, 0x00011117) // DDR_PHY_P0_MPODTCTRL

MXC_DCD_ITEM(57, MMDC_P0_BASE_ADDR + 0x004, 0x0002556d) // MMDC0_MDPDC with PWDT bits set
MXC_DCD_ITEM(58, MMDC_P0_BASE_ADDR + 0x404, 0x00011006) // MMDC0_MAPSR ADOPT power down enabled, MMDC will enter automatically to self-refresh while the number of idle cycle reached.

MXC_DCD_ITEM(59, MMDC_P0_BASE_ADDR + 0x01c, 0x00000000) // MMDC0_MDSCR, clear this register (especially the configuration bit as initialization is complete)
#else
/*
 * i.MX6DL 64BIT-DDR
 * ==================
 */
dcd_hdr:          .word 0x40A002D2 /* Tag=0xD2, Len=83*8 + 4 + 4, Ver=0x40 */
write_dcd_cmd:    .word 0x049C02CC /* Tag=0xCC, Len=83*8 + 4, Param=0x04 */

# IOMUXC_BASE_ADDR  = 0x20e0000
# DDR IO TYPE
MXC_DCD_ITEM(1, IOMUXC_BASE_ADDR + 0x774, 0x000c0000)
MXC_DCD_ITEM(2, IOMUXC_BASE_ADDR + 0x754, 0x00000000)
# Clock
MXC_DCD_ITEM(3, IOMUXC_BASE_ADDR + 0x4ac, 0x00000030)
MXC_DCD_ITEM(4, IOMUXC_BASE_ADDR + 0x4b0, 0x00000030)
# Address
MXC_DCD_ITEM(5, IOMUXC_BASE_ADDR + 0x464, 0x00000030)
MXC_DCD_ITEM(6, IOMUXC_BASE_ADDR + 0x490, 0x00000030)
MXC_DCD_ITEM(7, IOMUXC_BASE_ADDR + 0x74c, 0x00000030)
# Control
MXC_DCD_ITEM(8, IOMUXC_BASE_ADDR + 0x494, 0x00000030)

MXC_DCD_ITEM(9, IOMUXC_BASE_ADDR + 0x4a0, 0x00000000)

MXC_DCD_ITEM(10, IOMUXC_BASE_ADDR + 0x4b4, 0x00000030)
MXC_DCD_ITEM(11, IOMUXC_BASE_ADDR + 0x4b8, 0x00000030)
MXC_DCD_ITEM(12, IOMUXC_BASE_ADDR + 0x76c, 0x00000030)
# Data Strobe
MXC_DCD_ITEM(13, IOMUXC_BASE_ADDR + 0x750, 0x00020000)

MXC_DCD_ITEM(14, IOMUXC_BASE_ADDR + 0x4bc, 0x00000030)
MXC_DCD_ITEM(15, IOMUXC_BASE_ADDR + 0x4c0, 0x00000030)
MXC_DCD_ITEM(16, IOMUXC_BASE_ADDR + 0x4c4, 0x00000030)
MXC_DCD_ITEM(17, IOMUXC_BASE_ADDR + 0x4c8, 0x00000030)
MXC_DCD_ITEM(18, IOMUXC_BASE_ADDR + 0x4cc, 0x00000030)
MXC_DCD_ITEM(19, IOMUXC_BASE_ADDR + 0x4d0, 0x00000030)
MXC_DCD_ITEM(20, IOMUXC_BASE_ADDR + 0x4d4, 0x00000030)
MXC_DCD_ITEM(21, IOMUXC_BASE_ADDR + 0x4d8, 0x00000030)

MXC_DCD_ITEM(22, IOMUXC_BASE_ADDR + 0x760, 0x00020000)

MXC_DCD_ITEM(23, IOMUXC_BASE_ADDR + 0x764, 0x00000030)
MXC_DCD_ITEM(24, IOMUXC_BASE_ADDR + 0x770, 0x00000030)
MXC_DCD_ITEM(25, IOMUXC_BASE_ADDR + 0x778, 0x00000030)
MXC_DCD_ITEM(26, IOMUXC_BASE_ADDR + 0x77c, 0x00000030)
MXC_DCD_ITEM(27, IOMUXC_BASE_ADDR + 0x780, 0x00000030)
MXC_DCD_ITEM(28, IOMUXC_BASE_ADDR + 0x784, 0x00000030)
MXC_DCD_ITEM(29, IOMUXC_BASE_ADDR + 0x78c, 0x00000030)
MXC_DCD_ITEM(30, IOMUXC_BASE_ADDR + 0x748, 0x00000030)

MXC_DCD_ITEM(31, IOMUXC_BASE_ADDR + 0x470, 0x00000030)
MXC_DCD_ITEM(32, IOMUXC_BASE_ADDR + 0x474, 0x00000030)
MXC_DCD_ITEM(33, IOMUXC_BASE_ADDR + 0x478, 0x00000030)
MXC_DCD_ITEM(34, IOMUXC_BASE_ADDR + 0x47c, 0x00000030)
MXC_DCD_ITEM(35, IOMUXC_BASE_ADDR + 0x480, 0x00000030)
MXC_DCD_ITEM(36, IOMUXC_BASE_ADDR + 0x484, 0x00000030)
MXC_DCD_ITEM(37, IOMUXC_BASE_ADDR + 0x488, 0x00000030)
MXC_DCD_ITEM(38, IOMUXC_BASE_ADDR + 0x48c, 0x00000030)

# MMDC_P0_BASE_ADDR = 0x021b0000
# MMDC_P1_BASE_ADDR = 0x021b4000
# Calibrations
# ZQ
MXC_DCD_ITEM(39, MMDC_P0_BASE_ADDR + 0x800, 0xa1390003) // DDR_PHY_P0_MPZQHWCTRL, enable both one-time & periodic HW ZQ calibration.

# write leveling
MXC_DCD_ITEM(40, MMDC_P0_BASE_ADDR + 0x80c, 0x001F001F)
MXC_DCD_ITEM(41, MMDC_P0_BASE_ADDR + 0x810, 0x001F001F)
MXC_DCD_ITEM(42, MMDC_P1_BASE_ADDR + 0x80c, 0x001F001F)
MXC_DCD_ITEM(43, MMDC_P1_BASE_ADDR + 0x810, 0x001F001F)

//Read DQS Gating calibration
MXC_DCD_ITEM(44, MMDC_P0_BASE_ADDR + 0x83c, 0x42440244) // MPDGCTRL0 PHY0
MXC_DCD_ITEM(45, MMDC_P0_BASE_ADDR + 0x840, 0x02300238) // MPDGCTRL1 PHY0
MXC_DCD_ITEM(46, MMDC_P1_BASE_ADDR + 0x83C, 0x421C0228) // MPDGCTRL0 PHY1
MXC_DCD_ITEM(47, MMDC_P1_BASE_ADDR + 0x840, 0x0214021C) // MPDGCTRL1 PHY1

//Read calibration
MXC_DCD_ITEM(48, MMDC_P0_BASE_ADDR + 0x848, 0x38362E32) // MPRDDLCTL PHY0
MXC_DCD_ITEM(49, MMDC_P1_BASE_ADDR + 0x848, 0x3234342C) // MPRDDLCTL PHY1

//Write calibration
MXC_DCD_ITEM(50, MMDC_P0_BASE_ADDR + 0x850, 0x3F3F2E31) // MPWRDLCTL PHY0
MXC_DCD_ITEM(51, MMDC_P1_BASE_ADDR + 0x850, 0x2B35382B) // MPWRDLCTL PHY1

//read data bit delay: (3 is the reccommended default value, although out of reset value is 0):
MXC_DCD_ITEM(52, MMDC_P0_BASE_ADDR + 0x81c, 0x33333333) // DDR_PHY_P0_MPREDQBY0DL3
MXC_DCD_ITEM(53, MMDC_P0_BASE_ADDR + 0x820, 0x33333333) // DDR_PHY_P0_MPREDQBY1DL3
MXC_DCD_ITEM(54, MMDC_P0_BASE_ADDR + 0x824, 0x33333333) // DDR_PHY_P0_MPREDQBY2DL3
MXC_DCD_ITEM(55, MMDC_P0_BASE_ADDR + 0x828, 0x33333333) // DDR_PHY_P0_MPREDQBY3DL3
MXC_DCD_ITEM(56, MMDC_P1_BASE_ADDR + 0x81c, 0x33333333) // DDR_PHY_P1_MPREDQBY0DL3
MXC_DCD_ITEM(57, MMDC_P1_BASE_ADDR + 0x820, 0x33333333) // DDR_PHY_P1_MPREDQBY1DL3
MXC_DCD_ITEM(58, MMDC_P1_BASE_ADDR + 0x824, 0x33333333) // DDR_PHY_P1_MPREDQBY2DL3
MXC_DCD_ITEM(59, MMDC_P1_BASE_ADDR + 0x828, 0x33333333) // DDR_PHY_P1_MPREDQBY3DL3

// Complete calibration by forced measurement:
MXC_DCD_ITEM(60, MMDC_P0_BASE_ADDR + 0x8b8, 0x00000800) // DDR_PHY_P0_MPMUR0, frc_msr
MXC_DCD_ITEM(61, MMDC_P1_BASE_ADDR + 0x8b8, 0x00000800) // DDR_PHY_P0_MPMUR0, frc_msr

# MMDC init:
MXC_DCD_ITEM(62, MMDC_P0_BASE_ADDR + 0x004, 0x0002002D) // MMDC0_MDPDC
MXC_DCD_ITEM(63, MMDC_P0_BASE_ADDR + 0x008, 0x00333030) // MMDC0_MDOTC
MXC_DCD_ITEM(64, MMDC_P0_BASE_ADDR + 0x00c, 0x3F435313) // MMDC0_MDCFG0
MXC_DCD_ITEM(65, MMDC_P0_BASE_ADDR + 0x010, 0xB66E8B63) // MMDC0_MDCFG1
MXC_DCD_ITEM(66, MMDC_P0_BASE_ADDR + 0x014, 0x01FF00DB) // MMDC0_MDCFG2
MXC_DCD_ITEM(67, MMDC_P0_BASE_ADDR + 0x018, 0x00081740) // MMDC0_MDMISC

MXC_DCD_ITEM(68, MMDC_P0_BASE_ADDR + 0x01c, 0x00008000) // MMDC0_MDSCR, set the Configuration request bit during MMDC set up
MXC_DCD_ITEM(69, MMDC_P0_BASE_ADDR + 0x02c, 0x000026d2) // MMDC0_MDRWD; recommend to maintain the default values
MXC_DCD_ITEM(70, MMDC_P0_BASE_ADDR + 0x030, 0x00431023) // MMDC0_MDOR
MXC_DCD_ITEM(71, MMDC_P0_BASE_ADDR + 0x040, 0x00000027) // CS0_END

MXC_DCD_ITEM(72, MMDC_P0_BASE_ADDR + 0x000, 0x831A0000) // MMDC0_MDCTL

# Initialize 2GB DDR3 - Micron MT41J128M
MXC_DCD_ITEM(73, MMDC_P0_BASE_ADDR + 0x01c, 0x04008032) // MMDC0_MDSCR, MR2 write, CS1
MXC_DCD_ITEM(74, MMDC_P0_BASE_ADDR + 0x01c, 0x00008033) // MMDC0_MDSCR, MR3 write, CS1
MXC_DCD_ITEM(75, MMDC_P0_BASE_ADDR + 0x01c, 0x00048031) // MMDC0_MDSCR, MR1 write, CS1
MXC_DCD_ITEM(76, MMDC_P0_BASE_ADDR + 0x01c, 0x05208030) // MMDC0_MDSCR, MR0 write, CS1
MXC_DCD_ITEM(77, MMDC_P0_BASE_ADDR + 0x01c, 0x04008040) // MMDC0_MDSCR, ZQ calibration command sent to device on CS1

MXC_DCD_ITEM(78, MMDC_P0_BASE_ADDR + 0x020, 0x00005800) // MMDC0_MDREF

// It is recommended for new board designs and for customer boards
// to program these registers to a value of "0x00011117"
// The DRAM ODT remains enabled and it is required to leave the DRAM ODT enabled
MXC_DCD_ITEM(79, MMDC_P0_BASE_ADDR + 0x818, 0x00011117) // DDR_PHY_P0_MPODTCTRL
MXC_DCD_ITEM(80, MMDC_P1_BASE_ADDR + 0x818, 0x00011117) // DDR_PHY_P1_MPODTCTRL

MXC_DCD_ITEM(81, MMDC_P0_BASE_ADDR + 0x004, 0x0002556d) // MMDC0_MDPDC with PWDT bits set
MXC_DCD_ITEM(82, MMDC_P1_BASE_ADDR + 0x404, 0x00011006) // MMDC0_MAPSR ADOPT power down enabled, MMDC will enter automatically to self-refresh while the number of idle cycle reached.

MXC_DCD_ITEM(83, MMDC_P0_BASE_ADDR + 0x01c, 0x00000000) // MMDC0_MDSCR, clear this register (especially the configuration bit as initialization is complete)
#endif
#else
#ifndef PHYS_SDRAM_2GB
/*
 * i.MX6Q
 * 0.5 and/or 1GB DRAM
 */
dcd_hdr:          .word 0x40a002D2 /* Tag=0xD2, Len=83*8 + 4 + 4, Ver=0x40 */
write_dcd_cmd:    .word 0x049c02CC /* Tag=0xCC, Len=83*8 + 4, Param=0x04 */

/* DCD */


MXC_DCD_ITEM(1, IOMUXC_BASE_ADDR + 0x798, 0x000C0000)
MXC_DCD_ITEM(2, IOMUXC_BASE_ADDR + 0x758, 0x00000000)

MXC_DCD_ITEM(3, IOMUXC_BASE_ADDR + 0x588, 0x00000030)
MXC_DCD_ITEM(4, IOMUXC_BASE_ADDR + 0x594, 0x00000030)

MXC_DCD_ITEM(5, IOMUXC_BASE_ADDR + 0x56c, 0x00000030)
MXC_DCD_ITEM(6, IOMUXC_BASE_ADDR + 0x578, 0x00000030)
MXC_DCD_ITEM(7, IOMUXC_BASE_ADDR + 0x74c, 0x00000030)

MXC_DCD_ITEM(8, IOMUXC_BASE_ADDR + 0x57c, 0x00000030)

MXC_DCD_ITEM(9, IOMUXC_BASE_ADDR + 0x58c, 0x00000000)
MXC_DCD_ITEM(10, IOMUXC_BASE_ADDR + 0x59c, 0x00000030)
MXC_DCD_ITEM(11, IOMUXC_BASE_ADDR + 0x5a0, 0x00000030)
MXC_DCD_ITEM(12, IOMUXC_BASE_ADDR + 0x78c, 0x00000030)

MXC_DCD_ITEM(13, IOMUXC_BASE_ADDR + 0x750, 0x00020000)

MXC_DCD_ITEM(14, IOMUXC_BASE_ADDR + 0x5a8, 0x00000030)
MXC_DCD_ITEM(15, IOMUXC_BASE_ADDR + 0x5b0, 0x00000030)
MXC_DCD_ITEM(16, IOMUXC_BASE_ADDR + 0x524, 0x00000030)
MXC_DCD_ITEM(17, IOMUXC_BASE_ADDR + 0x51c, 0x00000030)
MXC_DCD_ITEM(18, IOMUXC_BASE_ADDR + 0x518, 0x00000030)
MXC_DCD_ITEM(19, IOMUXC_BASE_ADDR + 0x50c, 0x00000030)
MXC_DCD_ITEM(20, IOMUXC_BASE_ADDR + 0x5b8, 0x00000030)
MXC_DCD_ITEM(21, IOMUXC_BASE_ADDR + 0x5c0, 0x00000030)

MXC_DCD_ITEM(22, IOMUXC_BASE_ADDR + 0x774, 0x00020000)

MXC_DCD_ITEM(23, IOMUXC_BASE_ADDR + 0x784, 0x00000030)
MXC_DCD_ITEM(24, IOMUXC_BASE_ADDR + 0x788, 0x00000030)
MXC_DCD_ITEM(25, IOMUXC_BASE_ADDR + 0x794, 0x00000030)
MXC_DCD_ITEM(26, IOMUXC_BASE_ADDR + 0x79c, 0x00000030)
MXC_DCD_ITEM(27, IOMUXC_BASE_ADDR + 0x7a0, 0x00000030)
MXC_DCD_ITEM(28, IOMUXC_BASE_ADDR + 0x7a4, 0x00000030)
MXC_DCD_ITEM(29, IOMUXC_BASE_ADDR + 0x7a8, 0x00000030)
MXC_DCD_ITEM(30, IOMUXC_BASE_ADDR + 0x748, 0x00000030)

MXC_DCD_ITEM(31, IOMUXC_BASE_ADDR + 0x5ac, 0x00000030)
MXC_DCD_ITEM(32, IOMUXC_BASE_ADDR + 0x5b4, 0x00000030)
MXC_DCD_ITEM(33, IOMUXC_BASE_ADDR + 0x528, 0x00000030)
MXC_DCD_ITEM(34, IOMUXC_BASE_ADDR + 0x520, 0x00000030)
MXC_DCD_ITEM(35, IOMUXC_BASE_ADDR + 0x514, 0x00000030)
MXC_DCD_ITEM(36, IOMUXC_BASE_ADDR + 0x510, 0x00000030)
MXC_DCD_ITEM(37, IOMUXC_BASE_ADDR + 0x5bc, 0x00000030)
MXC_DCD_ITEM(38, IOMUXC_BASE_ADDR + 0x5c4, 0x00000030)

MXC_DCD_ITEM(39, MMDC_P0_BASE_ADDR + 0x800, 0xA1390003) 	// DDR_PHY_P0_MPZQHWCTRL, enable both one-time & periodic HW ZQ calibration.
// write leveling, based on Varicite board layout and T topology
// write leveling calibration fine tune these settings
#ifdef QUAD_DUAL_MEMORY_TYPE_2
MXC_DCD_ITEM(40, MMDC_P0_BASE_ADDR + 0x80c, 0x00130015)
MXC_DCD_ITEM(41, MMDC_P0_BASE_ADDR + 0x810, 0x00220017)
MXC_DCD_ITEM(42, MMDC_P1_BASE_ADDR + 0x80c, 0x0010001D)
MXC_DCD_ITEM(43, MMDC_P1_BASE_ADDR + 0x810, 0x00060019)
//######################################################
//calibration values based on calibration.
//######################################################
//Read DQS Gating calibration
MXC_DCD_ITEM(44, MMDC_P0_BASE_ADDR + 0x83c, 0x43340348) // MPDGCTRL0 PHY0
MXC_DCD_ITEM(45, MMDC_P0_BASE_ADDR + 0x840, 0x0334032C) // MPDGCTRL1 PHY0
MXC_DCD_ITEM(46, MMDC_P1_BASE_ADDR + 0x83c, 0x43340348) // MPDGCTRL0 PHY1
MXC_DCD_ITEM(47, MMDC_P1_BASE_ADDR + 0x840, 0x03340278) // MPDGCTRL1 PHY1
//Read calibration
MXC_DCD_ITEM(48, MMDC_P0_BASE_ADDR + 0x848, 0x34242A2E) // MPRDDLCTL PHY0
MXC_DCD_ITEM(49, MMDC_P1_BASE_ADDR + 0x848, 0x302A2436) // MPRDDLCTL PHY1
 //Write calibration
MXC_DCD_ITEM(50, MMDC_P0_BASE_ADDR + 0x850, 0x34363E36) // MPWRDLCTL PHY0
MXC_DCD_ITEM(51, MMDC_P1_BASE_ADDR + 0x850, 0x4230423E) // MPWRDLCTL PHY1
#else
MXC_DCD_ITEM(40, MMDC_P0_BASE_ADDR + 0x80c, 0x001C0019)
MXC_DCD_ITEM(41, MMDC_P0_BASE_ADDR + 0x810, 0x00260026)
MXC_DCD_ITEM(42, MMDC_P1_BASE_ADDR + 0x80c, 0x001D002C)
MXC_DCD_ITEM(43, MMDC_P1_BASE_ADDR + 0x810, 0x0019002E)
//######################################################
//calibration values based on calibration.
//######################################################
//Read DQS Gating calibration
MXC_DCD_ITEM(44, MMDC_P0_BASE_ADDR + 0x83c, 0x45300544) // MPDGCTRL0 PHY0
MXC_DCD_ITEM(45, MMDC_P0_BASE_ADDR + 0x840, 0x052C0520) // MPDGCTRL1 PHY0
MXC_DCD_ITEM(46, MMDC_P1_BASE_ADDR + 0x83c, 0x4528053C) // MPDGCTRL0 PHY1
MXC_DCD_ITEM(47, MMDC_P1_BASE_ADDR + 0x840, 0x052C0470) // MPDGCTRL1 PHY1
//Read calibration
MXC_DCD_ITEM(48, MMDC_P0_BASE_ADDR + 0x848, 0x3E363A40) // MPRDDLCTL PHY0
MXC_DCD_ITEM(49, MMDC_P1_BASE_ADDR + 0x848, 0x403C3246) // MPRDDLCTL PHY1
//Write calibration
MXC_DCD_ITEM(50, MMDC_P0_BASE_ADDR + 0x850, 0x3A38443C) // MPWRDLCTL PHY0
MXC_DCD_ITEM(51, MMDC_P1_BASE_ADDR + 0x850, 0x48364A3E) // MPWRDLCTL PHY1
#endif //QUAD_DUAL_MEMORY_TYPE_2

MXC_DCD_ITEM(52, MMDC_P0_BASE_ADDR + 0x81c, 0x33333333) // DDR_PHY_P0_MPREDQBY0DL3
MXC_DCD_ITEM(53, MMDC_P0_BASE_ADDR + 0x820, 0x33333333) // DDR_PHY_P0_MPREDQBY1DL3
MXC_DCD_ITEM(54, MMDC_P0_BASE_ADDR + 0x824, 0x33333333) // DDR_PHY_P0_MPREDQBY2DL3
MXC_DCD_ITEM(55, MMDC_P0_BASE_ADDR + 0x828, 0x33333333) // DDR_PHY_P0_MPREDQBY3DL3
MXC_DCD_ITEM(56, MMDC_P1_BASE_ADDR + 0x81c, 0x33333333) // DDR_PHY_P1_MPREDQBY0DL3
MXC_DCD_ITEM(57, MMDC_P1_BASE_ADDR + 0x820, 0x33333333) // DDR_PHY_P1_MPREDQBY1DL3
MXC_DCD_ITEM(58, MMDC_P1_BASE_ADDR + 0x824, 0x33333333) // DDR_PHY_P1_MPREDQBY2DL3
MXC_DCD_ITEM(59, MMDC_P1_BASE_ADDR + 0x828, 0x33333333) // DDR_PHY_P1_MPREDQBY3DL3

MXC_DCD_ITEM(60, MMDC_P0_BASE_ADDR + 0x8b8, 0x00000800) // DDR_PHY_P0_MPMUR0, frc_msr
MXC_DCD_ITEM(61, MMDC_P1_BASE_ADDR + 0x8b8, 0x00000800) // DDR_PHY_P0_MPMUR0, frc_msr

//MMDC init:
MXC_DCD_ITEM(62, MMDC_P0_BASE_ADDR + 0x004, 0x00020036) // MMDC0_MDPDC
MXC_DCD_ITEM(63, MMDC_P0_BASE_ADDR + 0x008, 0x09444040) // MMDC0_MDOTC
MXC_DCD_ITEM(64, MMDC_P0_BASE_ADDR + 0x00c, 0x555A7974) // MMDC0_MDCFG0
MXC_DCD_ITEM(65, MMDC_P0_BASE_ADDR + 0x010, 0xDB538F64) // MMDC0_MDCFG1
MXC_DCD_ITEM(66, MMDC_P0_BASE_ADDR + 0x014, 0x01FF00DB) // MMDC0_MDCFG2
MXC_DCD_ITEM(67, MMDC_P0_BASE_ADDR + 0x018, 0x00001740) // MMDC0_MDMISC

MXC_DCD_ITEM(68, MMDC_P0_BASE_ADDR + 0x01c, 0x00000000) // MMDC0_MDSCR, set the Configuration request bit during MMDC set up
MXC_DCD_ITEM(69, MMDC_P0_BASE_ADDR + 0x02c, 0x000026D2) // MMDC0_MDRWD; recommend to maintain the default values
MXC_DCD_ITEM(70, MMDC_P0_BASE_ADDR + 0x030, 0x005A1023) // MMDC0_MDOR
MXC_DCD_ITEM(71, MMDC_P0_BASE_ADDR + 0x040, 0x00000027) // CS0_END

MXC_DCD_ITEM(72, MMDC_P0_BASE_ADDR + 0x000, 0x831A0000) // MMDC0_MDCTL

MXC_DCD_ITEM(73, MMDC_P0_BASE_ADDR + 0x01c, 0x04088032) // MMDC0_MDSCR, MR2 write, CS0
MXC_DCD_ITEM(74, MMDC_P0_BASE_ADDR + 0x01c, 0x00008033) // MMDC0_MDSCR, MR3 write, CS0

MXC_DCD_ITEM(75, MMDC_P0_BASE_ADDR + 0x01c, 0x00428031) // MMDC0_MDSCR, MR1 write, CS0
#ifdef QUAD_DUAL_MEMORY_TYPE_2
MXC_DCD_ITEM(76, MMDC_P0_BASE_ADDR + 0x01c, 0x19308030) // MMDC0_MDSCR, MR0 write, CS0
#else
MXC_DCD_ITEM(76, MMDC_P0_BASE_ADDR + 0x01c, 0x09408030) // MMDC0_MDSCR, MR0 write, CS0
#endif
MXC_DCD_ITEM(77, MMDC_P0_BASE_ADDR + 0x01c, 0x04008040) // MMDC0_MDSCR, ZQ calibration command sent to device on CS0

MXC_DCD_ITEM(78, MMDC_P0_BASE_ADDR + 0x020, 0x00005800) // MMDC0_MDREF
// It is recommended for new board designs and for customer boards
// to program these registers to a value of "0x00011117"
// The DRAM ODT remains enabled and it is required to leave the DRAM ODT enabled
MXC_DCD_ITEM(79, MMDC_P0_BASE_ADDR + 0x818, 0x00011117) // DDR_PHY_P0_MPODTCTRL
MXC_DCD_ITEM(80, MMDC_P1_BASE_ADDR + 0x818, 0x00011117) // DDR_PHY_P1_MPODTCTRL

MXC_DCD_ITEM(81, MMDC_P0_BASE_ADDR + 0x004, 0x00025576) // MMDC0_MDPDC with PWDT bits set
MXC_DCD_ITEM(82, MMDC_P0_BASE_ADDR + 0x404, 0x00011006) // MMDC0_MAPSR ADOPT power down enabled, MMDC will enter automatically to self-refresh while the number of idle cycle reached.

MXC_DCD_ITEM(83, MMDC_P0_BASE_ADDR + 0x01c, 0x00000000) // MMDC0_MDSCR, clear this register (especially the configuration bit as initialization is complete)

#else
/*
 * i.MX6Q
 * 2GB DRAM
 */
dcd_hdr:          .word 0x40A002D2 /* Tag=0xD2, Len=83*8 + 4 + 4, Ver=0x40 */
write_dcd_cmd:    .word 0x049C02CC /* Tag=0xCC, Len=83*8 + 4, Param=0x04 */

/* DCD */
/* DDR3 initialization based on the MX6Q Auto Reference Design (ARD) */
/* DDR IO TYPE: */
MXC_DCD_ITEM(1, IOMUXC_BASE_ADDR + 0x798, 0x000C0000)
MXC_DCD_ITEM(2, IOMUXC_BASE_ADDR + 0x758, 0x00000000)
/* CLOCK: */
MXC_DCD_ITEM(3, IOMUXC_BASE_ADDR + 0x588, 0x00000030)
MXC_DCD_ITEM(4, IOMUXC_BASE_ADDR + 0x594, 0x00000030)
/* ADDRESS: */
MXC_DCD_ITEM(5, IOMUXC_BASE_ADDR + 0x56c, 0x00000030)
MXC_DCD_ITEM(6, IOMUXC_BASE_ADDR + 0x578, 0x00000030)
MXC_DCD_ITEM(7, IOMUXC_BASE_ADDR + 0x74c, 0x00000030)
/* CONTROL: */
MXC_DCD_ITEM(8, IOMUXC_BASE_ADDR + 0x57c, 0x00000030)
MXC_DCD_ITEM(9, IOMUXC_BASE_ADDR + 0x58c, 0x00000000)
/* configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_CTLDS */
MXC_DCD_ITEM(10, IOMUXC_BASE_ADDR + 0x59c, 0x00000030)
MXC_DCD_ITEM(11, IOMUXC_BASE_ADDR + 0x5a0, 0x00000030)
MXC_DCD_ITEM(12, IOMUXC_BASE_ADDR + 0x78c, 0x00000030)
/* DATA STROBE: */
MXC_DCD_ITEM(13, IOMUXC_BASE_ADDR + 0x750, 0x00020000)
MXC_DCD_ITEM(14, IOMUXC_BASE_ADDR + 0x5a8, 0x00000028)
MXC_DCD_ITEM(15, IOMUXC_BASE_ADDR + 0x5b0, 0x00000028)
MXC_DCD_ITEM(16, IOMUXC_BASE_ADDR + 0x524, 0x00000028)
MXC_DCD_ITEM(17, IOMUXC_BASE_ADDR + 0x51c, 0x00000028)
MXC_DCD_ITEM(18, IOMUXC_BASE_ADDR + 0x518, 0x00000028)
MXC_DCD_ITEM(19, IOMUXC_BASE_ADDR + 0x50c, 0x00000028)
MXC_DCD_ITEM(20, IOMUXC_BASE_ADDR + 0x5b8, 0x00000028)
MXC_DCD_ITEM(21, IOMUXC_BASE_ADDR + 0x5c0, 0x00000028)
/* DATA: */
MXC_DCD_ITEM(22, IOMUXC_BASE_ADDR + 0x774, 0x00020000)
MXC_DCD_ITEM(23, IOMUXC_BASE_ADDR + 0x784, 0x00000028)
MXC_DCD_ITEM(24, IOMUXC_BASE_ADDR + 0x788, 0x00000028)
MXC_DCD_ITEM(25, IOMUXC_BASE_ADDR + 0x794, 0x00000028)
MXC_DCD_ITEM(26, IOMUXC_BASE_ADDR + 0x79c, 0x00000028)
MXC_DCD_ITEM(27, IOMUXC_BASE_ADDR + 0x7a0, 0x00000028)
MXC_DCD_ITEM(28, IOMUXC_BASE_ADDR + 0x7a4, 0x00000028)
MXC_DCD_ITEM(29, IOMUXC_BASE_ADDR + 0x7a8, 0x00000028)
MXC_DCD_ITEM(30, IOMUXC_BASE_ADDR + 0x748, 0x00000028)
MXC_DCD_ITEM(31, IOMUXC_BASE_ADDR + 0x5ac, 0x00000028)
MXC_DCD_ITEM(32, IOMUXC_BASE_ADDR + 0x5b4, 0x00000028)
MXC_DCD_ITEM(33, IOMUXC_BASE_ADDR + 0x528, 0x00000028)
MXC_DCD_ITEM(34, IOMUXC_BASE_ADDR + 0x520, 0x00000028)
MXC_DCD_ITEM(35, IOMUXC_BASE_ADDR + 0x514, 0x00000028)
MXC_DCD_ITEM(36, IOMUXC_BASE_ADDR + 0x510, 0x00000028)
MXC_DCD_ITEM(37, IOMUXC_BASE_ADDR + 0x5bc, 0x00000028)
MXC_DCD_ITEM(38, IOMUXC_BASE_ADDR + 0x5c4, 0x00000028)

MXC_DCD_ITEM(39, MMDC_P0_BASE_ADDR + 0x800, 0xA1390003) 	// DDR_PHY_P0_MPZQHWCTRL, enable both one-time & periodic HW ZQ calibration.
// write leveling, based on Varicite board layout and T topology
// write leveling calibration fine tune these settings
MXC_DCD_ITEM(40, MMDC_P0_BASE_ADDR + 0x80c, 0x001B0016)
MXC_DCD_ITEM(41, MMDC_P0_BASE_ADDR + 0x810, 0x001F001F)
MXC_DCD_ITEM(42, MMDC_P1_BASE_ADDR + 0x80c, 0x00190026)
MXC_DCD_ITEM(43, MMDC_P1_BASE_ADDR + 0x810, 0x000A001F)
//######################################################
//calibration values based on calibration.
//######################################################
/* Read DQS Gating calibration */
MXC_DCD_ITEM(44, MMDC_P0_BASE_ADDR + 0x83c, 0x43240334) // MPDGCTRL0 PHY0
MXC_DCD_ITEM(45, MMDC_P0_BASE_ADDR + 0x840, 0x03200314) // MPDGCTRL1 PHY0
MXC_DCD_ITEM(46, MMDC_P1_BASE_ADDR + 0x83c, 0x43200334) // MPDGCTRL0 PHY1
MXC_DCD_ITEM(47, MMDC_P1_BASE_ADDR + 0x840, 0x031C0260) // MPDGCTRL1 PHY1
/* Read calibration */
MXC_DCD_ITEM(48, MMDC_P0_BASE_ADDR + 0x848, 0x4438363C) // MPRDDLCTL PHY0
MXC_DCD_ITEM(49, MMDC_P1_BASE_ADDR + 0x848, 0x3A362E44) // MPRDDLCTL PHY1
/* Write calibration */
MXC_DCD_ITEM(50, MMDC_P0_BASE_ADDR + 0x850, 0x3C364440) // MPWRDLCTL PHY0
MXC_DCD_ITEM(51, MMDC_P1_BASE_ADDR + 0x850, 0x4234483C) // MPWRDLCTL PHY1

/* read data bit delay: (3 is the reccommended default value, although out of reset value is 0): */
MXC_DCD_ITEM(52, MMDC_P0_BASE_ADDR + 0x81c, 0x33333333) // DDR_PHY_P0_MPREDQBY0DL3
MXC_DCD_ITEM(53, MMDC_P0_BASE_ADDR + 0x820, 0x33333333) // DDR_PHY_P0_MPREDQBY1DL3
MXC_DCD_ITEM(54, MMDC_P0_BASE_ADDR + 0x824, 0x33333333) // DDR_PHY_P0_MPREDQBY2DL3
MXC_DCD_ITEM(55, MMDC_P0_BASE_ADDR + 0x828, 0x33333333) // DDR_PHY_P0_MPREDQBY3DL3

MXC_DCD_ITEM(56, MMDC_P1_BASE_ADDR + 0x81c, 0x33333333) // DDR_PHY_P1_MPREDQBY0DL3
MXC_DCD_ITEM(57, MMDC_P1_BASE_ADDR + 0x820, 0x33333333) // DDR_PHY_P1_MPREDQBY1DL3
MXC_DCD_ITEM(58, MMDC_P1_BASE_ADDR + 0x824, 0x33333333) // DDR_PHY_P1_MPREDQBY2DL3
MXC_DCD_ITEM(59, MMDC_P1_BASE_ADDR + 0x828, 0x33333333) // DDR_PHY_P1_MPREDQBY3DL3
/* Complete calibration by forced measurement: */
MXC_DCD_ITEM(60, MMDC_P0_BASE_ADDR + 0x8b8, 0x00000800) // DDR_PHY_P0_MPMUR0, frc_msr
MXC_DCD_ITEM(61, MMDC_P1_BASE_ADDR + 0x8b8, 0x00000800) // DDR_PHY_P0_MPMUR0, frc_msr
/* MMDC init: */
MXC_DCD_ITEM(62, MMDC_P0_BASE_ADDR + 0x004, 0x00020036) // MMDC0_MDPDC
MXC_DCD_ITEM(63, MMDC_P0_BASE_ADDR + 0x008, 0x09444040) // MMDC0_MDOTC

MXC_DCD_ITEM(64, MMDC_P0_BASE_ADDR + 0x00c, 0x8A8F7955) // MMDC0_MDCFG0
MXC_DCD_ITEM(65, MMDC_P0_BASE_ADDR + 0x010, 0xFF328F64) // MMDC0_MDCFG1
MXC_DCD_ITEM(66, MMDC_P0_BASE_ADDR + 0x014, 0x01FF00DB) // MMDC0_MDCFG2

MXC_DCD_ITEM(67, MMDC_P0_BASE_ADDR + 0x018, 0x00001740) // MMDC0_MDMISC
MXC_DCD_ITEM(68, MMDC_P0_BASE_ADDR + 0x01c, 0x00008000) // MMDC0_MDSCR, set the Configuration request bit during MMDC
/* t during MMDC set up */
MXC_DCD_ITEM(69, MMDC_P0_BASE_ADDR + 0x02c, 0x000026D2) // MMDC0_MDRWD; recommend to maintain the default values
/* t values */
MXC_DCD_ITEM(70, MMDC_P0_BASE_ADDR + 0x030, 0x008F1023) // MMDC0_MDOR
MXC_DCD_ITEM(71, MMDC_P0_BASE_ADDR + 0x040, 0x00000047) // CS0_END
MXC_DCD_ITEM(72, MMDC_P0_BASE_ADDR + 0x000, 0x841A0000) // MMDC0_MDCTL
/* Mode register writes */
MXC_DCD_ITEM(73, MMDC_P0_BASE_ADDR + 0x01c, 0x04088032) // MMDC0_MDSCR, MR2 write, CS0
MXC_DCD_ITEM(74, MMDC_P0_BASE_ADDR + 0x01c, 0x00008033) // MMDC0_MDSCR, MR3 write, CS0
MXC_DCD_ITEM(75, MMDC_P0_BASE_ADDR + 0x01c, 0x00048031) // MMDC0_MDSCR, MR1 write, CS0
MXC_DCD_ITEM(76, MMDC_P0_BASE_ADDR + 0x01c, 0x09408030) // MMDC0_MDSCR, MR0 write, CS0
MXC_DCD_ITEM(77, MMDC_P0_BASE_ADDR + 0x01c, 0x04008040) // MMDC0_MDSCR, ZQ calibration command sent to device on CS0

MXC_DCD_ITEM(78, MMDC_P0_BASE_ADDR + 0x020, 0x00005800) // MMDC0_MDREF
// It is recommended for new board designs and for customer boards
// to program these registers to a value of "0x00011117"
// The DRAM ODT remains enabled and it is required to leave the DRAM ODT enabled
MXC_DCD_ITEM(79, MMDC_P0_BASE_ADDR + 0x818, 0x00011117) // DDR_PHY_P0_MPODTCTRL
MXC_DCD_ITEM(80, MMDC_P1_BASE_ADDR + 0x818, 0x00011117) // DDR_PHY_P1_MPODTCTRL
MXC_DCD_ITEM(81, MMDC_P0_BASE_ADDR + 0x004, 0x00025576) // MMDC0_MDPDC with PWDT bits set
MXC_DCD_ITEM(82, MMDC_P0_BASE_ADDR + 0x404, 0x00011006) // MMDC0_MAPSR ADOPT power down enabled, MMDC will enter automatically to self-refresh while the number of idle cycle reached.
MXC_DCD_ITEM(83, MMDC_P0_BASE_ADDR + 0x01c, 0x00000000) // MMDC0_MDSCR, clear this register (especially the configuration bit as initialization is complete)

#endif

#endif

#endif
